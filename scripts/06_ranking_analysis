/*
===============================================================================
 Script:     Ranking Analysis
===============================================================================
 Purpose:
    - Rank entities such as products, customers, or regions based on specific metrics (e.g., sales, quantity).
    - Identify top performers, underperformers, or create leaderboard-style outputs.
    - Enable comparative analysis across groups or time periods.

 SQL Functions Used:
    - Window Ranking Functions:
        - RANK()        : Assigns the same rank to ties, skipping subsequent ranks.
        - DENSE_RANK()  : Assigns consecutive ranks with no gaps for ties.
        - ROW_NUMBER()  : Assigns a unique sequential number to each row.
    - TOP             : Retrieves a limited number of highest/lowest ranked rows.
    - GROUP BY        : Aggregates data prior to ranking.
    - ORDER BY        : Sorts data to define rank order.

 Use Case:
    - Useful in sales performance dashboards, customer loyalty analysis, or product popularity scoring.
    - Supports prioritization and business decision-making through relative comparisons.
===============================================================================
*/

-- Which 5 products Generating the Highest Revenue?
-- Simple Ranking
SELECT TOP 5
    p.product_name,
    SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
    ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC;

-- Complex but Flexibly Ranking Using Window Functions
SELECT *
FROM (
    SELECT
        p.product_name,
        SUM(f.sales_amount) AS total_revenue,
        RANK() OVER (ORDER BY SUM(f.sales_amount) DESC) AS rank_products
    FROM gold.fact_sales f
    LEFT JOIN gold.dim_products p
        ON p.product_key = f.product_key
    GROUP BY p.product_name
) AS ranked_products
WHERE rank_products <= 5;

-- What are the 5 worst-performing products in terms of sales?
SELECT TOP 5
    p.product_name,
    SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
    ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue;

-- Find the top 10 customers who have generated the highest revenue
SELECT TOP 10
    c.customer_key,
    c.first_name,
    c.last_name,
    SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
    ON c.customer_key = f.customer_key
GROUP BY 
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_revenue DESC;

-- The 3 customers with the fewest orders placed
SELECT TOP 3
    c.customer_key,
    c.first_name,
    c.last_name,
    COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
    ON c.customer_key = f.customer_key
GROUP BY 
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_orders ;
